# ======================== CREATING A DASHBOARD USING THE DASH LIBRARY OF PYTHON ===================================


# ==========importing the libraries ========================
import pandas as pd  # library for data analysis
import webbrowser  # library for opening the web page in default web browser

import dash  # library used for creating the local server and dummy app
import dash_html_components as html  # library for designing the web page
from dash.dependencies import Input, State, Output  # used in callbacks for taking input and giving the modified data
import dash_core_components as dcc  # for drawing the elements of the webpage
import plotly.graph_objects as go  # for creating the figures of map and graph
import plotly.express as px  # for creating the charts
from dash.exceptions import PreventUpdate  # for preventing the errors on exceptions

# Global variables
app = dash.Dash()  # creating the app object


# ============ loading the data from the csv file =========================
# =====decalre variable to global means they can be access and modified in other function also =======
def load_dataset():
    # this line we use to hide some warnings which gives by pandas
    pd.options.mode.chained_assignment = None

    global data
    data = pd.read_csv("global_terror.csv")

    # === printing the first and last  five rows of the data for checking the data and its type=============
    print(data.head(5))
    print(data.tail(5))

    global month_list
    month = {
        "January": 1,
        "February": 2,
        "March": 3,
        "April": 4,
        "May": 5,
        "June": 6,
        "July": 7,
        "August": 8,
        "September": 9,
        "October": 10,
        "November": 11,
        "December": 12
    }
    month_list = [{"label": key, "value": values} for key, values in month.items()]

    global date_list
    date_list = [x for x in range(1, 32)]

    global region_list
    region_list = [{"label": str(i), "value": str(i)} for i in sorted(data['region_txt'].unique().tolist())]
    # Total 12 Regions

    global country_list
    country_list = data.groupby("region_txt")["country_txt"].unique().apply(list).to_dict()
    # Total 205 Countries

    global state_list
    state_list = data.groupby("country_txt")["provstate"].unique().apply(list).to_dict()
    # Total 2580 states

    global city_list
    city_list = data.groupby("provstate")["city"].unique().apply(list).to_dict()
    #Total 39489 cities
    #print(city_list)


    global attack_type_list
    attack_type_list = [{"label": str(i), "value": str(i)} for i in data['attacktype1_txt'].unique().tolist()]
    # print(attack_type_list)

    global year_list
    year_list = sorted(data['iyear'].unique().tolist())

    global year_dict
    year_dict = {str(year): str(year) for year in year_list}
    # print(year_dict)

    # ============creating the chart dropdown options  ====================================
    global chart_dropdown_values
    chart_dropdown_values = {"Terrorist Organisation": 'gname',
                             "Targetted Nation": 'natlty1_txt',
                             "Target Type": 'targtype1_txt',
                             "Attack Type": 'attacktype1_txt',
                             "Weapon Type": 'weaptype1_txt',
                             "Region": 'region_txt',
                             "Country Attacked": 'country_txt'
                             }

    chart_dropdown_values = [{"label": keys, "value": value} for keys, value in chart_dropdown_values.items()]


# ============function to open the default web browser ====================
def open_browser():
    webbrowser.open_new('http://127.0.0.1:8050/')


# =========== creating the layout of the page ==========================
def create_app_ui():
    main_layout = html.Div([

        html.H1('Terrorism  Analysis  Visualization',
                style={
                    "text-align": "center",
                    "font-family": "Stencil",
                    "text-shadow": ("4px 6px 2px #142d80", "-2px -2px 1px #142d80"),
                    "color": "white",
                    "font-size": "70px",
                }
                ),
        html.Hr(style={"color": "142d80"}),  # creating a line after the heading
        html.Br(),
        # ================= creating the tabs for  MAP tool ==================================
        dcc.Tabs(id="Tabs", value="Map",
                 style={"width": "26%", "padding": "3px", "border-width": "3px", "margin-left": "10px",
                        "border-style": "solid", "background": "white", "border-radius": "20px", "color": "#142d80"},
                 children=[
                     dcc.Tab(label="Map", id="Map tool", value="Map",
                             style={"width": "26%", "padding": "3px", "border-width": "3px", "margin-left": "10px",
                                    "border-style": "solid", "background": "white", "border-radius": "20px",
                                    "color": "#142d80"}, children=[
                             dcc.Tabs(id="subtabs", value="WorldMap",
                                      style={"width": "26%", "padding": "3px", "border-width": "3px",
                                             "margin-left": "10px", "border-style": "solid", "background": "white",
                                             "border-radius": "20px", "color": "#142d80"}, children=[
                                     dcc.Tab(label="World Map", id="World", value="WorldMap",
                                             style={"width": "26%", "padding": "3px", "border-width": "3px",
                                                    "margin-left": "10px", "border-style": "solid",
                                                    "background": "white", "border-radius": "20px",
                                                    "color": "#142d80"}),
                                     dcc.Tab(label="India Map", id="India", value="IndiaMap",
                                             style={"width": "26%", "padding": "3px", "border-width": "3px",
                                                    "margin-left": "10px", "border-style": "solid",
                                                    "background": "white", "border-radius": "20px", "color": "#142d80"})
                                 ]),

                             html.Div('FILTER',
                                      style={"margin-left": "50px", "font-family": "Century", "font-size": "20px",
                                             "color": "#142d80"}),
                             # ================ creating the dropdowns =========================
                             dcc.Dropdown(
                                 id='month',
                                 options=month_list,
                                 placeholder='Select Month',
                                 multi=True,
                                 clearable=True,
                                 searchable=True,
                                 style={
                                     "text-color": "#6b90ff",
                                     "text-align": "center",
                                     "background": "white",
                                     "display": "block",
                                     "width": "48%",
                                     "margin": "12px",
                                     "border-color": "#142d80",
                                     "border-radius": "25px",
                                     "border-width": "3px"
                                 }
                             ),
                             dcc.Dropdown(
                                 id='date',
                                 placeholder='Select Day',
                                 multi=True,
                                 clearable=True,
                                 searchable=True,
                                 style={
                                     "text-color": "#6b90ff",
                                     "text-align": "center",
                                     "background": "transparent",
                                     "display": "block",
                                     "width": "48%",
                                     "margin": "12px",
                                     "border-color": "#142d80",
                                     "border-radius": "25px",
                                     "border-width": "3px"

                                 }
                             ),
                             dcc.Dropdown(
                                 id='region-drop',
                                 options=region_list,
                                 placeholder='Select Region',
                                 multi=True,
                                 clearable=True,
                                 searchable=True,
                                 style={
                                     "text-color": "#6b90ff",
                                     "text-align": "center",
                                     "background": "transparent",
                                     "display": "block",
                                     "width": "48%",
                                     "margin": "12px",
                                     "border-color": "#142d80",
                                     "border-radius": "25px",
                                     "border-width": "3px"

                                 }
                             ),
                             dcc.Dropdown(
                                 id='country-drop',
                                 options=[{'label': 'All', 'value': 'All'}],
                                 placeholder='Select Country',
                                 multi=True,
                                 clearable=True,
                                 searchable=True,
                                 style={
                                     "text-color": "#6b90ff",
                                     "text-align": "center",
                                     "background": "transparent",
                                     "display": "block",
                                     "width": "48%",
                                     "margin": "12px",
                                     "border-color": "#142d80",
                                     "border-radius": "25px",
                                     "border-width": "3px"

                                 }
                             ),
                             dcc.Dropdown(
                                 id='state-drop',
                                 options=[{'label': 'All', 'value': 'All'}],
                                 placeholder='Select State or Province',
                                 multi=True,
                                 clearable=True,
                                 searchable=True,
                                 style={
                                     "text-color": "#6b90ff",
                                     "text-align": "center",
                                     "background": "transparent",
                                     "display": "block",
                                     "width": "48%",
                                     "margin": "12px",
                                     "border-color": "#142d80",
                                     "border-radius": "25px",
                                     "border-width": "3px"

                                 }
                             ),
                             dcc.Dropdown(
                                 id='city-drop',
                                 options=[{'label': 'All', 'value': 'All'}],
                                 placeholder='Select City',
                                 multi=True,
                                 clearable=True,
                                 searchable=True,
                                 style={
                                     "text-color": "#6b90ff",
                                     "text-align": "center",
                                     "background": "transparent",
                                     "display": "block",
                                     "width": "48%",
                                     "margin": "12px",
                                     "border-color": "#142d80",
                                     "border-radius": "25px",
                                     "border-width": "3px"

                                 }
                             ),
                             dcc.Dropdown(
                                 id='attacktype-drop',
                                 options=attack_type_list,
                                 placeholder='Select Attack Type',
                                 multi=True,
                                 clearable=True,
                                 searchable=True,
                                 style={
                                     "text-color": "#6b90ff",
                                     "text-align": "center",
                                     "background": "transparent",
                                     "display": "block",
                                     "width": "48%",
                                     "margin": "12px",
                                     "border-color": "#142d80",
                                     "border-radius": "25px",
                                     "border-width": "3px"

                                 }
                             ),
                             # ======================= creating the range slider for year ======================================
                             html.Div('Select the Year Range', id='year_title',
                                      style={"margin-left": "50px", "font-family": "Century", "font-size": "20px",
                                             "color": "#142d80"}),
                             dcc.RangeSlider(
                                 id='year-slider',
                                 min=min(year_list),
                                 max=max(year_list),
                                 value=[min(year_list), max(year_list)],
                                 marks=year_dict,
                                 step=None
                             ),
                             html.Br()
                         ]),

                     # ================ creating the tabs for the CHART ====================================
                     dcc.Tab(label="Chart", id="chart tool", value="Chart",
                             style={"width": "26%", "padding": "3px", "margin-left": "10px", "border-width": "3px",
                                    "border-style": "solid", "background": "white", "border-radius": "20px",
                                    "color": "#142d80"}, children=[
                             dcc.Tabs(id="subtabs2", value="WorldChart",
                                      style={"width": "26%", "padding": "3px", "border-width": "3px",
                                             "margin-left": "10px", "border-style": "solid", "background": "white",
                                             "border-radius": "20px", "color": "#142d80"}, children=[
                                     dcc.Tab(label="World Chart", id="WorldC", value="WorldChart",
                                             style={"width": "26%", "padding": "3px", "border-width": "3px",
                                                    "margin-left": "10px", "border-style": "solid",
                                                    "background": "white", "border-radius": "20px",
                                                    "color": "#142d80"}),
                                     dcc.Tab(label="India Chart", id="IndiaC", value="IndiaChart",
                                             style={"width": "26%", "padding": "3px", "border-width": "3px",
                                                    "margin-left": "10px", "border-style": "solid",
                                                    "background": "white", "border-radius": "20px",
                                                    "color": "#142d80"})]),
                             dcc.Dropdown(id="Chart_Dropdown", options=chart_dropdown_values,
                                          placeholder="Select option", value="region_txt",
                                          style={

                                              "background": "white",
                                              "text-color": "#6b90ff",
                                              "text-align": "center",
                                              "display": "block",
                                              "width": "48%",
                                              "margin": "12px",
                                              "border-color": "#142d80",
                                              "border-radius": "25px",
                                              "border-width": "3px"

                                          }
                                          ),
                             html.Br(),
                             html.Br(),

                             dcc.Input(id="search", placeholder="Search Filter", style={
                                 "text-color": "#6b90ff",
                                 "text-align": "center",
                                 "display": "block",
                                 "width": "20%",
                                 "margin-left": "30px",
                                 "height": "40px",
                                 "border-color": "#142d80",
                                 "border-radius": "25px",
                                 "border-width": "3px"
                             }),

                             html.Br(),
                             html.Br(),
                             html.Br(),
                             html.Br(),
                             html.Br(),
                             html.Br(),
                             html.Br(),
                             html.Br(),
                             html.Br(),
                             html.Br(), html.Br(),

                             html.Div('Select the Year Range', id='years_title',
                                      style={"margin-left": "50px", "font-family": "Cooper", "font-size": "20px",
                                             "color": "#142d80"}),
                             dcc.RangeSlider(
                                 id='cyear_slider',
                                 min=min(year_list),
                                 max=max(year_list),
                                 value=[min(year_list), max(year_list)],
                                 marks=year_dict,
                                 step=None
                             ),
                             html.Br()
                         ]),
                 ]),
        html.Div(id="graph-object", children="Map is loading...", style={
            "margin-left": "31%",
            "margin-top": "-38%",
            "position": "relative"
        }),
    ])
    return main_layout

# =======================creating the  callback of the  page to modify the data according to the hierarchy ================
@app.callback(dash.dependencies.Output('graph-object', 'children'),
              [
                  dash.dependencies.Input("Tabs", "value"),
                  dash.dependencies.Input('month', 'value'),
                  dash.dependencies.Input('date', 'value'),
                  dash.dependencies.Input('region-drop', 'value'),
                  dash.dependencies.Input('country-drop', 'value'),
                  dash.dependencies.Input('state-drop', 'value'),
                  dash.dependencies.Input('city-drop', 'value'),
                  dash.dependencies.Input('attacktype-drop', 'value'),
                  dash.dependencies.Input('year-slider', 'value'),
                  dash.dependencies.Input('cyear_slider', 'value'),

                  dash.dependencies.Input("Chart_Dropdown", "value"),
                  dash.dependencies.Input("search", "value"),
                  dash.dependencies.Input("subtabs2", "value")
              ]
              )
def update_app_ui(Tabs, month_value, date_value, region_value, country_value, state_value, city_value, attack_value,
                  year_value, chart_year_selector, chart_dp_value, search,
                  subtabs2):
    fig = None
    # ==================== sorting data for map =================
    if Tabs == "Map":
        # industry best practice
        print("Data Type of month value = ", str(type(month_value)))
        print("Data of month value = ", month_value)

        print("Data Type of Day value = ", str(type(date_value)))
        print("Data of Day value = ", date_value)

        print("Data Type of region value = ", str(type(region_value)))
        print("Data of region value = ", region_value)

        print("Data Type of country value = ", str(type(country_value)))
        print("Data of country value = ", country_value)

        print("Data Type of state value = ", str(type(state_value)))
        print("Data of state value = ", state_value)

        print("Data Type of city value = ", str(type(city_value)))
        print("Data of city value = ", city_value)

        print("Data Type of Attack value = ", str(type(attack_value)))
        print("Data of Attack value = ", attack_value)

        print("Data Type of year value = ", str(type(year_value)))
        print("Data of year value = ", year_value)
        # year_filter
        year_range = range(year_value[0], year_value[1] + 1)
        new_data = data[data["iyear"].isin(year_range)]

        # month_filter
        if month_value == [] or month_value is None:
            pass
        else:
            if date_value == [] or date_value is None:
                new_data = new_data[new_data["imonth"].isin(month_value)]
            else:
                new_data = new_data[new_data["imonth"].isin(month_value)
                                    & (new_data["iday"].isin(date_value))]
        # region, country, state, city filter
        if region_value == [] or region_value is None:
            pass
        else:
            if country_value == [] or country_value is None:
                new_data = new_data[new_data["region_txt"].isin(region_value)]
            else:
                if state_value == [] or state_value is None:
                    new_data = new_data[(new_data["region_txt"].isin(region_value)) &
                                        (new_data["country_txt"].isin(country_value))]
                else:
                    if city_value == [] or city_value is None:
                        new_data = new_data[(new_data["region_txt"].isin(region_value)) &
                                            (new_data["country_txt"].isin(country_value)) &
                                            (new_data["provstate"].isin(state_value))]
                    else:
                        new_df = new_data[(new_data["region_txt"].isin(region_value)) &
                                          (new_data["country_txt"].isin(country_value)) &
                                          (new_data["provstate"].isin(state_value)) &
                                          (new_data["city"].isin(city_value))]

        if attack_value == [] or attack_value is None:
            pass
        else:
            new_data = new_data[new_data["attacktype1_txt"].isin(attack_value)]

        mapFigure = go.Figure()  # creating a blank figure
        if new_data.shape[0]:
            pass
        else:
            new_data = pd.DataFrame(columns=['iyear', 'imonth', 'iday', 'country_txt', 'region_txt', 'provstate',
                                             'city', 'latitude', 'longitude', 'attacktype1_txt', 'nkill'])

            new_data.loc[0] = [0, 0, 0, None, None, None, None, None, None, None, None]
        # ===================== creating the scatter map ==========================
        mapFigure = px.scatter_mapbox(new_data,
                                      lat="latitude",
                                      lon="longitude",
                                      color="attacktype1_txt",
                                      hover_name="city",
                                      hover_data=["region_txt", "country_txt", "provstate", "city", "attacktype1_txt",
                                                  "nkill", "iyear", "imonth", "iday"],
                                      zoom=1
                                      )
        mapFigure.update_layout(mapbox_style="open-street-map",
                                autosize=True,
                                margin=dict(l=0, r=0, t=25, b=20),
                                )

        fig = mapFigure
    # ========================= sorting data for chart =========================================================
    elif Tabs == "Chart":
        fig = None

        year_range_c = range(chart_year_selector[0], chart_year_selector[1] + 1)
        chart_data = data[data["iyear"].isin(year_range_c)]

        if subtabs2 == "WorldChart":
            pass
        elif subtabs2 == "IndiaChart":
            chart_data = chart_data[(chart_data["region_txt"] == "South Asia") & (chart_data["country_txt"] == "India")]
        if chart_dp_value is not None and chart_data.shape[0]:
            if search is not None:
                chart_data = chart_data.groupby("iyear")[chart_dp_value].value_counts().reset_index(name="count")
                chart_data = chart_data[chart_data[chart_dp_value].str.contains(search, case=False)]
            else:
                chart_data = chart_data.groupby("iyear")[chart_dp_value].value_counts().reset_index(name="count")

        if chart_data.shape[0]:
            pass
        else:
            chart_data = pd.DataFrame(columns=['iyear', 'count', chart_dp_value])

            chart_data.loc[0] = [0, 0, "No data"]
        chartFigure = px.area(chart_data, x="iyear", y="count", color=chart_dp_value)
        fig = chartFigure
    return dcc.Graph(figure=fig)


@app.callback(
    Output("date", "options"),
    [Input("month", "value")])
def update_date(month):
    option = []
    if month:
        option = [{"label": m, "value": m} for m in date_list]
    return option


@app.callback([Output("region-drop", "value"),
               Output("region-drop", "disabled"),
               Output("country-drop", "value"),
               Output("country-drop", "disabled")],
              [Input("subtabs", "value")])
def update_r(tab):
    region = None
    disabled_r = False
    country = None
    disabled_c = False
    if tab == "WorldMap":
        pass
    elif tab == "IndiaMap":
        region = ["South Asia"]
        disabled_r = True
        country = ["India"]
        disabled_c = True
    return region, disabled_r, country, disabled_c

@app.callback(
    Output('country-drop', 'options'),
    [Input('region-drop', 'value')])
def set_country_options(region_value):
    option = []
    # Making the country Dropdown data
    if region_value is None:
        raise PreventUpdate
    else:
        for var in region_value:
            if var in country_list.keys():
                option.extend(country_list[var])
    return [{'label': m, 'value': m} for m in option]


@app.callback(
    Output('state-drop', 'options'),
    [Input('country-drop', 'value')])
def set_state_options(country_value):
    # Making the state Dropdown data
    option = []
    if country_value is None:
        raise PreventUpdate
    else:
        for var in country_value:
            if var in state_list.keys():
                option.extend(state_list[var])
    return [{'label': m, 'value': m} for m in option]


@app.callback(
    Output('city-drop', 'options'),
    [Input('state-drop', 'value')])
def set_city_options(state_value):
    # Making the city Dropdown data
    option = []
    if state_value is None:
        raise PreventUpdate
    else:
        for var in state_value:
            if var in city_list.keys():
                option.extend(city_list[var])
    return [{'label': m, 'value': m} for m in option]

# ======================MAIN FUNCTION FOR CONTROLLING THE FLOW OF THE APP   ===============
def main():
    load_dataset()  # first load the data
    open_browser()  # start the browser
    global app
    app.layout = create_app_ui()  # applying the layout to the app
    app.title = "Terrorism Analysis"  # title of the app

    app.run_server()  # === starting the app for running

    print(" PROGRAM EXECUTED SUCCESSFULLY !")  # if program ran successfully the it will print at last....
    print("THANK YOU ")
    df = None
    app = None

if __name__ == '__main__':
    main()
